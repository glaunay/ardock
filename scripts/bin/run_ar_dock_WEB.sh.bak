#!/bin/bash

#module load cuda/5.0
module load hex
module load naccess

# required variables
#probePdbFile
#targetPdbFile

#export HEX_FIRST_GPU=${CUDA_VISIBLE_DEVICES}
#ldd /software/mobi/hex/8.0.0//exe/hex8.0.0-cuda.x64

SOURCEDIR=`pwd`
cd $WORKDIR/

# debug
cp $targetPdbFile $SOURCEDIR

echo "$targetPdbFile $probePdbFile"

# copy target structure
cp $targetPdbFile ./
targetPdbFile=`basename $targetPdbFile`
cp $probePdbFile ./
probePdbFile=`basename $probePdbFile`

# compute free-form accessibility
naccess $targetPdbFile > /dev/null
rsaFree=${targetPdbFile%%.pdb}".rsa"

# create hex macro file
  echo "
open_receptor $targetPdbFile
open_ligand $probePdbFile

docking_fft_device 1
docking_fft_type 1

molecular_axis 1
display_sidechain 0

receptor_range_angle 180
ligand_range_angle 180

docking_r12_range 40
docking_r12_step 0.75
docking_r12_substeps 2

max_docking_solutions 3000
max_docking_clusters 2000
docking_cluster_window 200
docking_cluster_threshold 9.0
docking_correlation 0

MOVING_THING 1
RANDOMISE_MOLECULE
MOVING_THING 0
RANDOMISE_MOLECULE
COMMIT_VIEW
MOVING_THING -1

activate_docking
save_range 1 10 ./  pose_ pdb
#save_matrix matrix.dat
exit" > input.mac

  #run docking

/data/software/mobi/hex/8.0.0/exe/hex8.0.0.x64 -ncpu 8 -nocuda -noexec < input.mac > hex.log

cp hex.log $SOURCEDIR/

ls *.pdb 2 &> /dev/null
if test $? -ne 0
    then
	echo '{}' # Empty results
    exit;
fi
  # detect interface residues, based on accessibility

#echo post-treat docking poses
  # interate on poses
for file in `ls pose_*.pdb`
  do
    tag=${file%%.pdb}
    echo treating $file
    cmd="naccess $WORKDIR/$file";
    $cmd > /dev/null
    cp $tag.rsa $SOURCEDIR
    #ls
      # size of the target accessibility file
    NB=`wc -l $rsaFree  | cut -f1 -d" "`
    #wc -l *.rsa
    # truncate pose accessibility file accordingly:
    echo "head -$NB $WORKDIR/$tag.rsa > $WORKDIR/temp.rsa "
    head -$NB $WORKDIR/$tag.rsa > $WORKDIR/temp.rsa
    cp temp.rsa ${tag}Top.rsa
      # cp $WORKDIR/temp.rsa $SOURCEDIR/${tag}_temp.rsa
    # extract interface: residues with accessiblity change, i.e., differences in the accessibility file
    # head temp.rsa $TARGET_NAME.rsa
    diff temp.rsa $rsaFree | grep "> RES"  | cut -c 11-16  >> $WORKDIR/interface_index.temp

      #cp interface_index.temp $SLURM_SUBMIT_DIR
      #cp $TARGET_NAME.rsa ${file%%.pdb}.rsa $SLURM_SUBMIT_DIR
done

cp *.rsa $SOURCEDIR

# count residues
cat $WORKDIR/interface_index.temp | sort | uniq -c | awk '{print substr($0,9,6)","substr($0,0,7)}' > $SOURCEDIR/nb_hits.data



## inliner perl to produce json file out of raw count
cat $SOURCEDIR/nb_hits.data | perl -ne 'BEGIN {print "{ \"rawCouts\":[\n"; $all =[] } @tmp = $_ =~ /^(.)(.{4})(.)$/g;$tmp[2] = $tmp[2] eq " " ? "null" : "\"$tmp[2]\"";  push @{$all}, "{\"chain\" : \"" . $tmp[0] . "\" , \"resSeq\" : \"" . $tmp[1] . "\" , \"AChar\" : " . $tmp[2] . "}"; END{ print join(",", @{$all}) . "\n]}\n"}'




#echo "copying updated_result"
#  cat interface_index.temp | sort | uniq -c | awk '{print substr($0,9,6)","substr($0,0,7)}' > nb_hits.data
#  cp nb_hits.data  $SLURM_SUBMIT_DIR/$nb_hits_file
#  cp interface_index.temp $SLURM_SUBMIT_DIR/$residue_file

#  rm -f pose_*
#  rm -f $probe.pdb
#done


#echo "returning a PDB file with modified B-factors"

#echo "alter all, b=-1" > temp.pml
#cat nb_hits.data  | awk -F"," '{pos=$1;chain=substr(pos,0,1);ind=substr(pos,2,6);gsub(/ /,"",ind);gsub(/ /,"",chain); printf "alter ///%s/%s/,b=%f\n",chain,ind,$2}' >> temp.pml
#echo save colored_structure.pdb  >> temp.pml
#echo quit >> temp.pml
#pymol  -c -q $TARGET_NAME.pdb temp.pml

#cp colored_structure.pdb $SLURM_SUBMIT_DIR


